library(MASS)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, Vor = F)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, F)
Plot_Cropped_Voronoi_2D(X, F)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, Vor = F)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, F)
library(CGALTri)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
# now crop it
B = c(-1, -1, 1, 1)
if (is.null(bCoord)) {
bCoord = 1.1 * c(min(X[, 1]), min(X[, 2]), max(X[, 1]), max(X[, 2]))
}
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
library(CGALTri)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
library(CGALTri)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
data = X
X
bCoord = 1.1 * c(min(data[, 1]), min(data[, 2]),
max(data[, 1]), max(data[, 2]))
rX = bCoord[c(1, 3)]
rY = bCoord[c(2, 4)]
# find data within the box
dataB = subset(data, data[, 1] >= rX[1] & data[, 1] <= rX[2] & data[, 2] >= rY[1] & data[, 2] <= rY[2])
xCoord = dataB[, 1]
yCoord = dataB[, 2]
# some parameters
gg_color_hue = hcl(h = seq(15, 375, length = 7), l = 65, c = 100)[1:6] # pretty color
par(mar = rep(0.1, 4)) # remove margin
# choose what to plot
S = Cropped_Voronoi_2D(data, bCoord) # compute Voronoi segements
if (Vor) {
S = S$vEdges
} else {
S = S$tEdges
}
# plot the diagram
plot(xCoord, yCoord, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(bCoord[1], bCoord[2], bCoord[3], bCoord[4], border = gg_color_hue[5], lwd = 2)
S = S$vEdges
# plot the diagram
plot(xCoord, yCoord, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(bCoord[1], bCoord[2], bCoord[3], bCoord[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
S = S$tEdges
if (Vor) {
S = S$vEdges
} else {
S = S$tEdges
}
# plot the diagram
plot(xCoord, yCoord, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(bCoord[1], bCoord[2], bCoord[3], bCoord[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
S
# choose what to plot
S = Cropped_Voronoi_2D(data, bCoord) # compute Voronoi segements
S = S$tEdges
# plot the diagram
plot(xCoord, yCoord, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(bCoord[1], bCoord[2], bCoord[3], bCoord[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
library(CGALTri)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, F)
bCoord = NULL
Plot_Cropped_Voronoi_2D(X, Vor = F)
Plot_Cropped_Voronoi_2D(X, B, F)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, F)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, Vor = F)
sample(1:3)
sample(5, 1:3)
sample(1:3, 5)
?sample
sample(1:3, 5, replace = T)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T))
wX
Regular_Tri_2D(wX)
library(CGALTri)
Regular_Tri_2D(wX)
library(CGALTri)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, Vor = F)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, Vor = F)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, F)
library(MASS)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, Vor = F)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, Vor = F)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B, F)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T))
Regular_Tri_2D(wX)
Regular_Tri_2D(wX)
library(CGALTri)
A = library(CGALTri)
data = X
rX = bCoord[c(1, 3)]
rY = bCoord[c(2, 4)]
# find data within the box
dataB = subset(data, data[, 1] >= rX[1] & data[, 1] <= rX[2] & data[, 2] >= rY[1] & data[, 2] <= rY[2])
bCoord = c(-2,-2,2,2)
rX = bCoord[c(1, 3)]
rY = bCoord[c(2, 4)]
# find data within the box
dataB = subset(data, data[, 1] >= rX[1] & data[, 1] <= rX[2] & data[, 2] >= rY[1] & data[, 2] <= rY[2])
xCoord = dataB[, 1]
yCoord = dataB[, 2]
# some parameters
gg_color_hue = hcl(h = seq(15, 375, length = 7), l = 65, c = 100)[1:6] # pretty color
par(mar = rep(0.1, 4)) # remove margin
# choose what to plot
S = Delaunay_Tri_2D(data, bCoord) # compute Voronoi segements
if (Vor) {
S = S$vEdges
} else {
S = S$tEdges
}
S = A
# plot the diagram
plot(xCoord, yCoord, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(bCoord[1], bCoord[2], bCoord[3], bCoord[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
S
S
A
S = Regular_Tri_2D(wX)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
library(CGALTri)
library(MASS)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Triangulation_2D(X, B)
TX = Triangulation_2D(X, B)
class(TX)
plot(TX)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
TX = Triangulation_2D(X, B)
TX
ploplot())
plot(TX)
TX$Vor
TX$Tri
plot(TX, type = "Tri")
library(CGALTri)
plot(TX, type = "Tri")
plot(TX)
plot(TX)
TX = Triangulation_2D(X)
plot(TX)
Obj = TX
# triangulation type
tri.id = switch(Obj$type, Delaunay = 1, Regular = 2)
# extract data
box = Obj$box
x = Obj$Data[, 1]
y = Obj$Data[, 2]
if (tri.id == 2) {
w = Obj$Data[, 3]
}
rX = box[c(1, 3)]
rY = box[c(2, 4)]
# plot triangulation
if (type == "Tri" || type == "Both") {
S = Obj$Tri
# plot the data
plot(x, y, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(box[1], box[2], box[3], box[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
}
rX
library(CGALTri)
TX = Triangulation_2D(X, B)
plot(TX)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Triangulation_2D(X)
plot(TX)
# plot an uncropped Voronoi diagram
TX = Triangulation_2D(X)
plot(TX)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
TX = Triangulation_2D(X)
TX = Triangulation_2D(X, B)
plot(TX)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T))
Triangulation_2D(wX, B)
TwX = Triangulation_2D(wX, B)
plot(TwX)
plot(TX)
plot(TwX)
Tw
TwX
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T)/ 3)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
sample(1:3, 100, replace = T)/ 3
library(CGALTri)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
library(CGALTri)
# add weight
w = sample(1:3 / 10, 100, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
library(CGALTri)
plot(TwX)
TwX$Box
clip(-1, 1, -1, 1)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
library(CGALTri)
plot(TwX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# generate some random data
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
TX = Triangulation_2D(X)
plot(TX)
# now crop it
B = c(-1, -1, 1, 1)
TX = Triangulation_2D(X, B)
plot(TX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# generate some random data
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
w
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
library(CGALTri)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 1000, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
w
sqrt(w)
library(CGALTri)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 , 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
/ 10
/ 10
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
