class(TX)
plot(TX)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
TX = Triangulation_2D(X, B)
TX
ploplot())
plot(TX)
TX$Vor
TX$Tri
plot(TX, type = "Tri")
library(CGALTri)
plot(TX, type = "Tri")
plot(TX)
plot(TX)
TX = Triangulation_2D(X)
plot(TX)
Obj = TX
# triangulation type
tri.id = switch(Obj$type, Delaunay = 1, Regular = 2)
# extract data
box = Obj$box
x = Obj$Data[, 1]
y = Obj$Data[, 2]
if (tri.id == 2) {
w = Obj$Data[, 3]
}
rX = box[c(1, 3)]
rY = box[c(2, 4)]
# plot triangulation
if (type == "Tri" || type == "Both") {
S = Obj$Tri
# plot the data
plot(x, y, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(box[1], box[2], box[3], box[4], border = gg_color_hue[5], lwd = 2)
for (i in 1:nrow(S)) {
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
}
}
rX
library(CGALTri)
TX = Triangulation_2D(X, B)
plot(TX)
# generate some random data
X = 2 * mvrnorm(100, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
Triangulation_2D(X)
plot(TX)
# plot an uncropped Voronoi diagram
TX = Triangulation_2D(X)
plot(TX)
# now crop it
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
TX = Triangulation_2D(X)
TX = Triangulation_2D(X, B)
plot(TX)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T))
Triangulation_2D(wX, B)
TwX = Triangulation_2D(wX, B)
plot(TwX)
plot(TX)
plot(TwX)
Tw
TwX
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
# add weight
wX = cbind(X, sample(1:3, 100, replace = T)/ 3)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
sample(1:3, 100, replace = T)/ 3
library(CGALTri)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
library(CGALTri)
# add weight
w = sample(1:3 / 10, 100, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, B, type = "Reg")
plot(TwX)
library(CGALTri)
plot(TwX)
TwX$Box
clip(-1, 1, -1, 1)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
library(CGALTri)
plot(TwX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# generate some random data
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# plot an uncropped Voronoi diagram
TX = Triangulation_2D(X)
plot(TX)
# now crop it
B = c(-1, -1, 1, 1)
TX = Triangulation_2D(X, B)
plot(TX)
# power diagram
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# generate some random data
X = 2 * mvrnorm(20, rep(0, 2), diag(2))
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
w
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 100, 20, replace = T)
wX = cbind(X, w)
library(CGALTri)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 1000, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
w
sqrt(w)
library(CGALTri)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
# power diagram
w = sample(1:3 , 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
/ 10
/ 10
# power diagram
w = sample(1:3 / 10, 20, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
library(MASS)
library(CGALTri)
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# uncropped triangulation
TX = Triangulation_2D(X)
plot(TX)
TX
object.size()
Obj = TX
# some plotting parameters
gg_color_hue = hcl(h = seq(15, 375, length = 7), l = 65, c = 100)[1:6] # pretty color
par(mar = rep(0.1, 4)) # remove margin
# triangulation type
tri.id = switch(Obj$type, Delaunay = 1, Regular = 2)
# extract data
box = Obj$Box
x = Obj$Data[, 1]
y = Obj$Data[, 2]
if (tri.id == 2) {
w = Obj$Data[, 3]
}
rX = box[c(1, 3)]
rY = box[c(2, 4)]
S = Obj$Vor
plot(x, y, xlim = rX, ylim = rY, pch = 20,
xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "")
rect(box[1], box[2], box[3], box[4], border = gg_color_hue[5], lwd = 2)
u = 1
i = 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
i = i + 1
segments(S[i, 1], S[i, 2], S[i, 3], S[i, 4], col = gg_color_hue[1], lwd = 1)
X= c(4,6,8,10,12)
sd(X)
Y = c(30,4,33,70,240,20,40,16,80,36,155)
IQR(Y)
quantile(Y)
library(CGALTri)
library(MASS)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
TX = Triangulation_2D(X, B)
plot(TX)
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
wX
Trans_Gradient_2D(wX)
library(CGALTri)
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
library(MASS)
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
wX
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
Trans_Gradient_2D(wX)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
Trans_Gradient_2D(wX)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
library(MASS)
library(CGALTri)
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
X
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
wX
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
n = 1000
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
wX
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
# generate some random data
n = 25
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
# uncropped triangulation
TX = Triangulation_2D(X)
plot(TX)
# now crop it
B = c(-1, -1, 1, 1)
TX = Triangulation_2D(X, B)
plot(TX)
# regular triangulation
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
wX
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
library(CGALTri)
Trans_Gradient_2D(wX)
n = 10
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
n = 1000
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
wX
library(CGALTri)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
library(CGALTri)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
library(CGALTri)
Trans_Gradient_2D(wX)
TwX = Triangulation_2D(wX, type = "Reg")
plot(TwX)
TX = Triangulation_2D(X, B)
plot(TX)
TX
TX$Tri
nrow(TX$Tri)
nrow(TX$Vor)
nrow(TX$Data)
wX
nrow(wX)
nrow(X)
B
# uncropped triangulation
TX = Triangulation_2D(X)
plot(TX)
TX$Vor
TX$Data
n = 100
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
n = 20
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
n = 80
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
n = 99
X = 2 * mvrnorm(n, rep(0, 2), diag(2))
w = sample(1:3 / 10, n, replace = T)
wX = cbind(X, w)
ptm = proc.time()
Trans_Gradient_2D(wX)
proc.time() - ptm
devtools::load_all(".")
library(CGALTri)
library(MASS)
library(CGALTri)
##############################
library(transport)
library(mlbench)
library(deldir)
n = 100
## Generate Data
Sigma <- matrix(c(1,0.0,0.0,1),2,2); x = mvrnorm(n, rep(0, 2), Sigma)
# data = mlbench.spirals(n)
data = mlbench.shapes(n)
x = data$x
b <- wpp(x,rep(1/n,n))    ## Create wpp object
# plot(x[,1],x[,2], type="p")
y = x
## Standardize the data
x1x = max(x[,1]); x1n = min(x[,1])
x2x = max(x[,2]); x2n = min(x[,2])
sc = max(x2x - x2n, x1x - x1n)
y[,1] = 1/n + (x[,1] - x1n)/sc*(1-2/n)
y[,2] = 1/n + (x[,2] - x2n)/sc*(1-2/n)
plot(x[,1],x[,2],type="p", col = "dark red", cex=0.9, pch = 16, xlab="X_1",ylab="X_2", main = "Scatter plot")
## pgrid function Example
m <- matrix(1:1, 4, 4)
a <- pgrid(m)
## Semidiscrete transport between class 'pgrid' and class 'wpp'
b <- wpp(y,rep(1,n)/n)
res <- transport(a,b,p=2)
plot(a,b,res,xlab="U_1",ylab="U_2", main = "Power diagram")
wX = as.matrix(res$sites)
TwX = Triangulation_2D(wX, c(0, 0, 1, 1), type = "Reg")
ptm = proc.time()
w = Transport_2D(y)
proc.time() - ptm
wX2 = cbind(y, w)
TwX2 = Triangulation_2D(wX2, c(0, 0, 1, 1), type = "Reg")
par(mfrow = c(1, 2))
plot(TwX, type = "Vor", main = "transport package")
plot(TwX2, type = "Vor", main = "CGAL")
Xlist = list()
test = rep(0, 5000)
for (i in 1:5000) {
X = 2 * mvrnorm(50, rep(0, 2), diag(2) / 10)
B = c(0, 0, 1, 1)
# regular triangulation
w = sample(1:3 / 100, 50, replace = T)
test[i] = sum(Voronoi_Area_2D(X, w, B))
Xlist[[i]] = X
}
test
setwd("~/Dropbox/Workspace/Pima")
pima = read.csv("diabetes.R")
pima = read.csv("diabetes.csv")
pima
