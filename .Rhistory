library(MASS)
library(plot3D)
library(Rcpp)
install.packages("plot3D")
sourceCpp("CGAL_Tri.cpp")
sourceCpp("CGAL_Tri.cpp")
install.packages(c("haven", "lava", "lme4", "ModelMetrics", "openssl", "RcppArmadillo", "RcppEigen", "readr", "rio", "rlang", "sfsmisc", "xts"))
sourceCpp("CGAL_Tri.cpp")
install.packages("plot3D")
install.packages("Rcpp")
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton
Rcpp.package.skeleton()
Rcpp.package.skeleton("CGALTri")
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
library(CGALTri)
library(MASS)
library(plot3D)
library(Rcpp)
set.seed(1234)
gg_color_hue = hcl(h = seq(15, 375, length = 200), l = 65, c = 100)
S = toeplitz((3:1) / 3)
R = rWishart(1, 3, S)[, , 1]
X = mvrnorm(100, rep(0, 3), R)
test_tri(X)
remove.packages("CGALTri", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
library(CGALTri)
library(CGALTri)
test_tri2()
library(CGALTri)
library(MASS)
library(plot3D)
library(Rcpp)
library(CGALTri)
set.seed(1234)
gg_color_hue = hcl(h = seq(15, 375, length = 200), l = 65, c = 100)
S = toeplitz((3:1) / 3)
R = rWishart(1, 3, S)[, , 1]
X = mvrnorm(100, rep(0, 3), R)
test_tri2(X)
test_tri2(X)
library(CGALTri)
library(CGALTri)
test_tri2(X)
library(CGALTri)
test_tri2(X)
library(CGALTri)
test_tri2(X)
library(CGALTri)
test_tri2(X)
A = Cropped_Voronoi_2D(X)
library(CGALTri)
A = Cropped_Voronoi_2D(X)
A
plot(-1:2, -1:2)
plot(NULL, xlim = c(-1, 2), ylim = c(-1, 2), xaxt = "n", yaxt = "n", xlab = "", ylab = "n")
for (i in 1:nrow(A)) {
segments(A[1], A[2], A[3], A[4])
}
plot(NULL, xlim = c(-1, 2), ylim = c(-1, 2), xaxt = "n", yaxt = "n", xlab = "", ylab = "n")
for (i in 1:nrow(A)) {
segments(A[i, 1], A[i, 2], A[i, 3], A[i, 4])
}
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
library(CGALTri)
B = c(-1, -1, 2, 2)
A = Cropped_Voronoi_2D(X, B)
A
save.image("~/Dropbox/Workspace/CGAL/temp.RData")
library(CGALTri)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Plot_Cropped_Voronoi_2D(X, B)
devtools::document()
?Plot_Cropped_Voronoi_2D
S = toeplitz((3:1) / 3)
R = rWishart(1, 3, S)[, , 1]
X = mvrnorm(100, rep(0, 3), R)
X
max(X)
Plot_Cropped_Voronoi_2D(X, B)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X)
Plot_Cropped_Voronoi_2D(X, B)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
S = toeplitz((3:1) / 9)
R = rWishart(1, 3, S)[, , 1]
X = mvrnorm(100, rep(0, 3), R)
X
S = toeplitz((2:1) / 10)
S
R = rWishart(1, 2, S)[, , 1]
R
X = mvrnorm(100, rep(0, 2), R)
X
max(B)
min(X)
max(X)
B = c(-1, -1, 1, 1)
Plot_Cropped_Voronoi_2D(X, B)
Cropped_Voronoi_2D(X, B)
devtools::document()
?Plot_Cropped_Voronoi_2D
set.seed(1234)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(10, rep(0, 2), R)
B = c(-1, -1, 1, 1)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X
X = mvrnorm(10, rep(0, 2), R) *5
B = c(-1, -1, 1, 1)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X
X = mvrnorm(10, rep(0, 2), R) * 10
X
B = c(-1, -1, 1, 1)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
B = c(-10, -10, 20, 20)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X = mvrnorm(100, rep(0, 2), R) * 10
B = c(-10, -10, 20, 20)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X = mvrnorm(100, rep(0, 2), R) * 10
B = c(-10, -10, 20, 20)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
max(X)
X
min(X)
B = c(-5, -5, 10, 10)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
set.seed(1234)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 10
B = c(-5, -5, 10, 10)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
round(X)
X = mvrnorm(100, rep(0, 2), R) * 10
round(X)
X = mvrnorm(100, rep(0, 2), R) * 100
X = round(mvrnorm(100, rep(0, 2), R) * 100)
B = c(-5, -5, 10, 10)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
library(CGALTri)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
set.seed(1234)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
Plot_Cropped_Voronoi_2D(X)
Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
# generate some random data
set.seed(1234)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-7, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-7, -5, 8, 10)
library(CGALTri)
Plot_Cropped_Voronoi_2D(X, B)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-7, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-6, -5, 8, 10)
Plot_Cropped_Voronoi_2D(X, B)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 100
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
range(X)
X = mvrnorm(100, rep(0, 2), R) * 10
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
# generate some random data
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 10
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
# generate some random data
S = toeplitz((2:1) / 10)
R = rWishart(1, 2, S)[, , 1]
X = mvrnorm(100, rep(0, 2), R) * 10
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
# plot an uncropped Voronoi diagram
Plot_Cropped_Voronoi_2D(X)
# now crop it
B = c(-5, -5, 10, 10)
Plot_Cropped_Voronoi_2D(X, B)
# example given in the document
X = matrix(c(0, 0, 1, 1, 0, 1), 3, 2, byrow = T)
B = c(-1, -1, 2, 2)
Cropped_Voronoi_2D(X, B)
Plot_Cropped_Voronoi_2D(X, B)
library(CGALTri)
devtools::document()
?CGALTri
library(CGALTri)
?CGALTri
devtools::document()
?CGALTri
remove.packages("CGALTri", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
